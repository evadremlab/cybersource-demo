<!DOCTYPE html>
<html lang="en">

<head>
  <title>Sample Checkout</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"
    integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">

  <style>
    #cardNumber-container,
    #securityCode-container {
      height: 38px;
    }
    #errors-output, .validation-error {
      color: red;
      font-weight: bold;
    }
    .flex-microform-focused {
      background-color: #fff;
      border-color: #80bdff;
      outline: 0;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);
    }
    .cardLogos {
      padding-left: 1rem;
    }
  </style>
</head>

<div class="container card">
  <div class="card-body">
    <h1>MicroForm Checkout</h1>
    <form action="/token" id="my-sample-form" method="post">
      <div class="form-group">
        <label for="cardholderName">Name</label>
        <input id="cardholderName" class="form-control" name="cardholderName" placeholder="Name on the card"
          value="David B Balmer">
      </div>

      <div class="form-row">
        <div class="form-group col-md-6">
          <label id="cardNumber-label">Card Number</label>
          <img class="cardLogos" src="/images/credit-card-logos.png">
          <span id="cardNumber-error" class="validation-error" role="alert"></span>
          <div id="cardNumber-container" class="form-control"></div>
        </div>
        <div class="form-group col-md-6">
          <label for="securityCode-container">Security Code</label>
          <span id="securityCode-error" class="validation-error" role="alert"></span>
          <div id="securityCode-container" class="form-control"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="expMonth">Expiry month</label>
          <select id="expMonth" class="form-control">
            <option>01</option>
            <option>02</option>
            <option>03</option>
            <option>04</option>
            <option>05</option>
            <option>06</option>
            <option>07</option>
            <option>08</option>
            <option>09</option>
            <option>10</option>
            <option>11</option>
            <option selected>12</option>
          </select>
        </div>
        <div class="form-group col-md-6">
          <label for="expYear">Expiry year</label>
          <select id="expYear" class="form-control">
            <option>2024</option>
            <option>2025</option>
            <option>2026</option>
          </select>
        </div>
      </div>

      <button type="button" id="pay-button" class="btn btn-primary">Generate Transient Token</button>
      <span id="errors-output" role="alert"></span>
      <input type="hidden" id="transientToken" name="transientToken">
    </form>
  </div>
</div>

<!-- // TODO: use asset path returned in the JWT from /microform/v2/sessions -->
<script src="https://testflex.cybersource.com/microform/bundle/v2.0/flex-microform.min.js"></script>

<script>
  // JWK is set up on the server side route for /

  var form = document.querySelector('#my-sample-form');
  var payButton = document.querySelector('#pay-button');
  var transientToken = document.querySelector('#transientToken');
  var expMonth = document.querySelector('#expMonth');
  var expYear = document.querySelector('#expYear');
  var errorsOutput = document.querySelector('#errors-output');
  var cardNumberError = document.querySelector('#cardNumber-error');
  var securityCodeError = document.querySelector('#securityCode-error');

  // the capture context that was requested server-side for this transaction
  var captureContext = "<%-captureContext%>";

  // custom styles that will be applied to each field we create using Microform
  var myStyles = {
    'input': {
      'font-size': '14px',
      'font-family': 'helvetica, tahoma, calibri, sans-serif',
      'color': '#555'
    },
    ':disabled': { 'cursor': 'not-allowed' },
    'valid': { 'color': 'blue' },
    'invalid': { 'color': 'red' }
  };

  // setup
  var flex = new Flex(captureContext);
  var microform = flex.microform({ styles: myStyles });
  var cardNumber = microform.createField('number', { placeholder: 'Enter card number' });
  var securityCode = microform.createField('securityCode', { placeholder: '•••' });
  var cardSecurityCodeLabel = document.querySelector('label[for=securityCode-container]');

  function resetValidationErrors() {
    errorsOutput.textContent = '';
    cardNumberError.textContent = '';
    securityCodeError.textContent = '';
  }

  cardNumber.load('#cardNumber-container');
  securityCode.load('#securityCode-container');

  cardNumber.on('change', (data) => {
    resetValidationErrors();
    if (data.valid) { // no more input accepted once it's valid
      securityCode.focus();
    }
  });
  
  securityCode.on('change', (data) => {
    resetValidationErrors();
  });

  payButton.addEventListener('click', function () {
    var options = {
      expirationMonth: document.querySelector('#expMonth').value,
      expirationYear: document.querySelector('#expYear').value
    };

    resetValidationErrors();

    microform.createToken(options, function (err, token) {
      if (err) {
        console.error(err);
        errorsOutput.textContent = err.message;
        for (let details of err.details) {
          if (details.location === 'number') {
            cardNumberError.innerText = 'valid number is required';
          } else if (details.location === 'securityCode') {
            securityCodeError.innerText = 'valid security code is required';
          }
        }
      } else {
        // At this point you may pass the token back to your server as you wish.
        // In this example we append a hidden input to the form and submit it.      
        console.log(JSON.stringify(token));
        transientToken.value = JSON.stringify(token);
        form.submit();
      }
    });
  });
</script>
</body>

</html>